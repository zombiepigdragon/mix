#!/usr/bin/bash
# Make the environment programmer friendly
set -o errexit -o pipefail -o noclobber -o nounset

PKGBUILD=""
SRCDIR=""
PKGDIR=""
MIXPKG="$(realpath "${BASH_SOURCE[0]}")"

NOGPG=false

pkgname=''
pkgver=''
pkgrel=''
epoch=0;
pkgdesc=''
url=""
declare -a license=()
install=''
changelog=''
declare -a source=()
declare -a validpgpkeys=()
declare -a noextract=()
declare -a md5sums=()
declare -a sha1sums=() sha224sums=() sha256sums=() sha384sums=() sha512sums=() b2sums=()
declare -a groups=()
declare -a arch=()
declare -a backup=()
declare -a depends=()
declare -a makedepends=()
declare -a checkdepends=()
declare -a optdepends=()
declare -a conflicts=()
declare -a provides=()
declare -a replaces=()
declare -a options=()

function version() {
	echo "mixpkg - 0.0.0"
	echo "Created by Lemix Team <lemixproject@gmail.com>"
}

function usage() {
	version
	cat << EOF
mixpkg is not meant to be run by end users. Instead, use mix.
mix will call mixpkg anytime it's needed. If mixpkg has to be called manually for any reason, it's a bug.
Continue only if you have a legitimate reason to be using mixpkg manually.

USAGE: mixpkg [-hV]
       mixpkg action -ppkgbuild -ssrcdir -dpkgdir

OPTIONS:
-h,--help: Show this message
-V,--version: Show the mix/mixpkg version being run
-p: The filename of the pkgbuild
-s: The srcdir
-d: The pkgdir

ACTIONS:
dump: Output all of the information provided in the pkgbuild in a parseable format
compile: Perform all tasks needed to create a package
download: Download extract, and verify pkgbuild sources
build: Build the pkgbuild
package: Run the package step of the pkgbuild
EOF
}

# This function also validates settings from the pkgbuild
function import_pkgbuild() {
	export srcdir="$SRCDIR"
	export pkgdir="$PKGDIR"
	startdir="$(dirname "$PKGBUILD")"
	export startdir # Seperate line to allow set -e
	# Defaults for when nothing's defined
	# Disable lint for undefined source
	# shellcheck source=/dev/null
	source "$PKGBUILD"
	[ -z "$pkgname" ] && echo "No pkgname found." >&2 && exit 1
	[ -z "$pkgver" ] && echo "No pkgver found." >&2 && exit 1
	[ -z "$pkgrel" ] && echo "No pkgrel found." >&2 && exit 1
	[[ "$pkgrel" =~ ^[0-9]+$ ]] || { echo "pkgrel must be an integer." >&2; exit 1; }
	[ "${#arch[@]}" -ne 0 ] || { echo "No architectures defined." >&2; exit 1; }
}

function build_pkgbuild() {
	cd -- "$SRCDIR"
	declare -F prepare >/dev/null && prepare
	cd -- "$SRCDIR"
	if declare -F build > /dev/null; then
		echo "Building $pkgname"
		build > /dev/null
	fi
	cd -- "$SRCDIR"
	if declare -F check; then
		check > /dev/null
	fi
}

function package_pkgbuild() {
	if declare -F package > /dev/null; then
		echo "Packaging $pkgname"
		cd -- "$SRCDIR"
		package > /dev/null
	else
		echo 'Missing package function!' >&2
		exit 1
	fi
	cd -- "$startdir"
	[ -z "$install" ] || cp -- "$install" "$PKGDIR/$pkgname.install"
	[ -z "$changelog" ] || cp -- "$changelog" "$PKGDIR/$pkgname.changelog"
	package_location="$(realpath -- "$PKGDIR/../$pkgname.tar.xz")"
	dump_pkgbuild >| "$PKGDIR/.MANIFEST"
	bsdtar -cJf "$package_location" -C "$PKGDIR" --strip-components=1 .
	echo "Created $pkgname package in $package_location"
}

function compile_pkgbuild() {
	download_pkgbuild_files
	build_pkgbuild
	fakeroot -- "$MIXPKG" package -p"$PKGBUILD" -s"$SRCDIR" -d"$PKGDIR"
}

function dump_pkgbuild() {
	cat << EOF
name = "$pkgname"
version = "$pkgver"
release = "$pkgrel"
epoch = $epoch
pkgdesc = "$pkgdesc"
url = "$url"
EOF
	(
	# Turns arguments into a toml key and array
	function key_array() {
		printf '%s = [' "$1"
		shift
		items=("$@")
		for item in "${items[@]}"; do
			printf '"%s", ' "$item"
		done
		printf ']\n'
	}
	key_array 'licence' "${license[@]}"
	key_array 'groups' "${groups[@]}"
	key_array 'backup' "${backup[@]}"
	key_array 'depends' "${depends[@]}"
	key_array 'makedepends' "${makedepends[@]}"
	key_array 'checkdepends' "${checkdepends[@]}"
	key_array 'optdepends' "${optdepends[@]}"
	key_array 'conflicts' "${conflicts[@]}"
	key_array 'provides' "${provides[@]}"
	key_array 'replaces' "${replaces[@]}"
	)
}

function download_pkgbuild_files() {
	local urlregex
	readonly urlregex='^(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]\.[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'
	local checksums
	local checksumcommand=''
	if [ -n "${md5sums+x}" ]; then
		checksums=(${md5sums[@]})
		checksumcommand='md5sum'
	fi
	if [ -n "${sha1sums+x}" ]; then
		checksums=(${sha1sums[@]})
		checksumcommand='sha1sum'
	fi
	if [ -n "${sha224sums+x}" ]; then
		checksums=(${sha224sums[@]})
		checksumcommand='sha224sum'
	fi
	if [ -n "${sha256sums+x}" ]; then
		checksums=(${sha256sums[@]})
		checksumcommand='sha256sum'
	fi
	if [ -n "${sha384sums+x}" ]; then
		checksums=(${sha384sums[@]})
		checksumcommand='sha384sum'
	fi
	if [ -n "${sha512sums+x}" ]; then
		checksums=(${sha512sums[@]})
		checksumcommand='sha512sum'
	fi
	if [ -n "${b2sums+x}" ]; then
		checksums=(${b2sums[@]})
		checksumcommand='b2sum'
	fi
	[ -z "$checksumcommand" ] && echo "Warning: No checksum type found." >&2
	for i in "${!source[@]}"; do
		source_file="$(echo -n "${source[$i]}" | awk -F '::' '{ print $NF }')"
		local result_file
		# Takes the end of the URL and allows rename syntax
		result_file="$SRCDIR/$(basename -- "${source[$i]}" | awk -F '::' '{ print $1 }')"
		if [[ "$source_file" =~ $urlregex ]]; then
			# source_file is a url
			if [ -e "$result_file" ]; then
				echo "$result_file is already downloaded."
			else
				echo "Downloading $source_file"
				curl "$source_file" -Lfo "$result_file" 
			fi
		else
			# source_file is a path
			if [ ! -e "$result_file" ]; then
				if [ ! -e "$source_file" ]; then
					echo "Failed to locate local file $source_file!" >&2 && exit 1
				else
					cp -- "$source_file" "$result_file"
				fi
			fi
		fi
		if [ "$NOGPG" = false ] && [[ "$source_file" == *'.sig' ]]; then
			gpg --verify "$result_file" "${result_file%.*}"
		fi
		[ "${checksums[$i]}" != 'SKIP' ] && \
			[ "${checksums[$i]}" != "$($checksumcommand "$result_file" | awk '{print $1}')" ] && \
			echo "$result_file failed checksum validation!" && exit 1
		if [[ ! " ${noextract[*]} " == *" $source_file "* ]]; then
			bsdtar -tf "$result_file" &>/dev/null && bsdtar -C "$SRCDIR" -xf "$result_file"
		fi
		echo "Successfully retrieved $result_file"
	done
}

function main() {
	# Processes arguments with getopt (enhanced)
	local TEMP
	TEMP="$(getopt -o 'hVp:s:d:' --long 'help,version,nogpg' -n 'mixpkg' -- "$@")"
	eval set -- "$TEMP"
	unset TEMP

	local ACTION=''

	# The argument reading loop
	# Sets the variables according to the arguments
	while true; do
		case "$1" in
			'-h'|'--help')
				ACTION='HELP'
				shift
				break
				;;
			'-V'|'--version')
				ACTION='VERSION'
				shift
				break
				;;
			'-p')
				PKGBUILD="$(realpath "$2")"
				shift 2
				continue
				;;
			'-s')
				SRCDIR="$(realpath "$2")"
				shift 2
				continue
				;;
			'-d')
				PKGDIR="$(realpath "$2")"
				shift 2
				continue
				;;
			'--nogpg')
				NOGPG="true"
				shift
				continue
				;;
			'--')
				shift
				break
				;;
			*)
				echo "Internal error parsing arguments!" >&2
				exit 1
				;;
		esac
	done

	case "$ACTION" in
		'HELP')
			usage
			exit 0
			;;
		'VERSION')
			version
			exit 0
			;;
	esac

	[ -z "$PKGBUILD" ] && usage && exit 1
	[ -z "$SRCDIR" ] && usage && exit 1
	[ -z "$PKGDIR" ] && usage && exit 1

	[ "$#" -ne 1 ] && echo "Exactly one valid action is required." >&2 && exit 1
	ACTION="$(echo -nE "$1" | tr '[:lower:]' '[:upper:]')"
	import_pkgbuild

	case "$ACTION" in
		'DUMP')
			dump_pkgbuild
			;;
		'COMPILE')
			compile_pkgbuild
			;;
		'DOWNLOAD')
			download_pkgbuild_files
			;;
		'BUILD')
			build_pkgbuild
			;;
		'PACKAGE')
			package_pkgbuild
			;;
		*)
			echo "Unrecognized action $1. See --help for a list of valid actions." >&2
			exit 1
	esac
	exit 0
}

# The beginning of the application
# Quick checks and initing
[[ $(getopt --test; echo $?) -ne 4 ]] && echo "getopt is not enhanced version, couldn't parse arguments." && exit 1
main "$@"
