#!/usr/bin/bash
# Make the environment programmer friendly
set -o errexit -o pipefail -o noclobber -o nounset

function version() {
echo "mixpkg - 0.0.0"
}

function usage() {
version
cat << EOF
mixpkg is not meant to be run by end users. Instead, use mix.
mix will call mixpkg anytime it's needed. If mixpkg has to be called manually for any reason, it's a bug.
Continue only if you have a legitimate reason to be using mixpkg manually.

USAGE: mixpkg [-hV]
       mixpkg action -ppkgbuild -ssrcdir -dpkgdir

OPTIONS:
-h,--help: Show this message
-V,--version: Show the mix/mixpkg version being run
-p: The filename of the pkgbuild
-s: The srcdir
-d: The pkgdir

ACTIONS:
dump: Output all of the information provided in the pkgbuild in a parseable format
compile: Build the pkgbuild and then package it
build: Build the pkgbuild
package: Run the package step of the pkgbuild
EOF
}

# Arguments:
# $1: The pkgbuild filepath
# $2: srcdir
# $3: pkgdir
# $4: startdir
function import_pkgbuild() {
srcdir="$2"
pkgdir="$3"
startdir="$4"
source "$1"
}

# Arguments:
# $1: The pkgbuild filepath
# $2: srcdir
# $3: pkgdir
# $4: startdir
# ALL PATHS MUST BE ABSOLUTE!
function build_pkgbuild() {
import_pkgbuild "$1" "$2" "$3" "$4"
# TODO: Get source
cd "$2"
mkdir -p "$pkgname-$pkgver" # TODO: Workaround for not having source at this step, guesses at dir name
declare -F prepare >/dev/null && prepare
cd "$2"
declare -F build >/dev/null && build || $(echo 'Missing build step.' >&2 && exit 1)
cd "$2"
declare -F check >/dev/null && check
}

# Arguments:
# $1: The pkgbuild filepath
# $2: srcdir
# $3: pkgdir
# $4: startdir
# ALL PATHS MUST BE ABSOLUTE!
function package_pkgbuild() {
import_pkgbuild "$1" "$2" "$3" "$4"
mkdir -p "$pkgname-$pkgver" # TODO: Workaround for not having source at this step, guesses at dir name
declare -F package >/dev/null && package || $(echo 'Missing package step.' >&2 && exit 1)
}

# Arguments:
# $1: The pkgbuild filepath
# $2: srcdir
# $3: pkgdir
# $4: startdir
# ALL PATHS MUST BE ABSOLUTE!
function compile_pkgbuild() {
build_pkgbuild "$1" "$2" "$3" "$4"
fakeroot -- $MIXPKG package -p"$1" -s"$2" -d"$3"
}

function main() {
# Processes arguments with getopt (enhanced)
TEMP=$(getopt -o 'hVp:s:d:' --long 'help,version' -n 'mixpkg' -- "$@")
[ $? -ne 0 ] && echo "Exiting" && exit 1
eval set -- "$TEMP"
unset TEMP

# Variables determining which option to use
ACTION=""
PKGBUILD='PKGBUILD'
SRCDIR=""
PKGDIR=""
MIXPKG="$(realpath ${BASH_SOURCE[0]})"

# The argument reading loop
# Sets the variables according to the arguments
while true; do
case "$1" in
'-h'|'--help')
ACTION='HELP'
shift
continue
;;
'-V'|'--version')
ACTION='VERSION'
shift
continue
;;
'-p')
PKGBUILD="$(realpath $2)"
shift 2
continue
;;
'-s')
SRCDIR="$(realpath $2)"
shift 2
continue
;;
'-d')
PKGDIR="$(realpath $2)"
shift 2
continue
;;
'--')
shift
break
;;
*)
echo "Internal error parsing arguments!" >&2
exit 1
;;
esac
done

[ "$ACTION" == 'HELP' ] && usage && exit 0
[ "$ACTION" == 'VERSION' ] && version && exit 0

[ "$#" -ne 1 ] && echo "Only use one action" >&2 && exit 1
ACTION="$(echo -nE $1 | tr a-z A-Z)"

[ -z "$PKGBUILD" ] && usage && exit 1
[ -z "$SRCDIR" ] && usage && exit 1
[ -z "$PKGDIR" ] && usage && exit 1
[ "$ACTION" == 'COMPILE' ] && compile_pkgbuild "$PKGBUILD" "$SRCDIR" "$PKGDIR" "$(realpath `dirname $PKGBUILD`)" && exit 0 
[ "$ACTION" == 'BUILD' ] && build_pkgbuild "$PKGBUILD" "$SRCDIR" "$PKGDIR" "$(realpath `dirname $PKGBUILD`)" && exit 0 
[ "$ACTION" == 'PACKAGE' ] && package_pkgbuild "$PKGBUILD" "$SRCDIR" "$PKGDIR" "$(realpath `dirname $PKGBUILD`)" && exit 0 
echo "Unrecognized action $ACTION" >&2 && exit 1
}

# The beginning of the application
# Quick checks and initing
[[ `getopt --test; echo $?` -ne 4 ]] && echo "getopt is not enhanced version, couldn't parse arguments." && exit 1
#set -x
main "$@"
